<PISI>
    <Source>
        <Name>vulkan</Name>
        <Packager>
            <Name>Ikey Doherty</Name>
            <Email>ikey@solus-project.com</Email>
        </Packager>
        <License>Apache-2.0</License>
        <PartOf>xorg.graphics</PartOf>
        <Summary xml:lang="en">Khronos Vulkan ICD loader</Summary>
        <Description xml:lang="en">Vulkan is an Explicit API, enabling direct control over how GPUs actually work. No (or very little) validation or error checking is done inside a Vulkan driver. Applications have full control and responsibility. Any errors in how Vulkan is used often result in a crash. This project provides standard validation layers that can be enabled to ease development by helping developers verify their applications correctly use the Vulkan API.
Vulkan supports multiple GPUs and multiple global contexts (VkInstance). The ICD loader is necessary to support multiple GPUs and the VkInstance level Vulkan commands. Additionally, the loader manages inserting Vulkan layer libraries, including validation layers between the application and the ICD.
</Description>
        <Archive type="binary" sha1sum="79eb0752a961b8e0d15c77d298c97498fbc89c5a">https://solus-project.com/sources/README.Solus</Archive>
    </Source>
    <Package>
        <Name>vulkan</Name>
        <Summary xml:lang="en">Khronos Vulkan ICD loader</Summary>
        <Description xml:lang="en">Vulkan is an Explicit API, enabling direct control over how GPUs actually work. No (or very little) validation or error checking is done inside a Vulkan driver. Applications have full control and responsibility. Any errors in how Vulkan is used often result in a crash. This project provides standard validation layers that can be enabled to ease development by helping developers verify their applications correctly use the Vulkan API.
Vulkan supports multiple GPUs and multiple global contexts (VkInstance). The ICD loader is necessary to support multiple GPUs and the VkInstance level Vulkan commands. Additionally, the loader manages inserting Vulkan layer libraries, including validation layers between the application and the ICD.
</Description>
        <PartOf>xorg.graphics</PartOf>
        <Files>
            <Path fileType="executable">/usr/bin</Path>
            <Path fileType="library">/usr/lib64/lib*.so</Path>
            <Path fileType="library">/usr/lib64/lib*.so.*</Path>
            <Path fileType="data">/usr/share/etc/vulkan/explicit_layer.d/VkLayer_core_validation.json</Path>
            <Path fileType="data">/usr/share/etc/vulkan/explicit_layer.d/VkLayer_object_tracker.json</Path>
            <Path fileType="data">/usr/share/etc/vulkan/explicit_layer.d/VkLayer_parameter_validation.json</Path>
            <Path fileType="data">/usr/share/etc/vulkan/explicit_layer.d/VkLayer_standard_validation.json</Path>
            <Path fileType="data">/usr/share/etc/vulkan/explicit_layer.d/VkLayer_threading.json</Path>
            <Path fileType="data">/usr/share/etc/vulkan/explicit_layer.d/VkLayer_unique_objects.json</Path>
            <Path fileType="data">/usr/share/vulkan</Path>
        </Files>
    </Package>
    <Package>
        <Name>vulkan-32bit</Name>
        <Summary xml:lang="en">32-bit libraries for vulkan</Summary>
        <Description xml:lang="en">Vulkan is an Explicit API, enabling direct control over how GPUs actually work. No (or very little) validation or error checking is done inside a Vulkan driver. Applications have full control and responsibility. Any errors in how Vulkan is used often result in a crash. This project provides standard validation layers that can be enabled to ease development by helping developers verify their applications correctly use the Vulkan API.
Vulkan supports multiple GPUs and multiple global contexts (VkInstance). The ICD loader is necessary to support multiple GPUs and the VkInstance level Vulkan commands. Additionally, the loader manages inserting Vulkan layer libraries, including validation layers between the application and the ICD.
</Description>
        <PartOf>emul32</PartOf>
        <RuntimeDependencies>
            <Dependency release="8">vulkan</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="library">/usr/lib32/lib*.so</Path>
            <Path fileType="library">/usr/lib32/lib*.so.*</Path>
        </Files>
    </Package>
    <Package>
        <Name>vulkan-32bit-devel</Name>
        <Summary xml:lang="en">Development files for 32-bit vulkan</Summary>
        <Description xml:lang="en">Vulkan is an Explicit API, enabling direct control over how GPUs actually work. No (or very little) validation or error checking is done inside a Vulkan driver. Applications have full control and responsibility. Any errors in how Vulkan is used often result in a crash. This project provides standard validation layers that can be enabled to ease development by helping developers verify their applications correctly use the Vulkan API.
Vulkan supports multiple GPUs and multiple global contexts (VkInstance). The ICD loader is necessary to support multiple GPUs and the VkInstance level Vulkan commands. Additionally, the loader manages inserting Vulkan layer libraries, including validation layers between the application and the ICD.
</Description>
        <PartOf>programming.devel</PartOf>
        <RuntimeDependencies>
            <Dependency release="8">vulkan-devel</Dependency>
            <Dependency release="8">vulkan-32bit</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="data">/usr/lib32/pkgconfig/*.pc</Path>
        </Files>
    </Package>
    <Package>
        <Name>vulkan-devel</Name>
        <Summary xml:lang="en">Development files for vulkan</Summary>
        <Description xml:lang="en">Vulkan is an Explicit API, enabling direct control over how GPUs actually work. No (or very little) validation or error checking is done inside a Vulkan driver. Applications have full control and responsibility. Any errors in how Vulkan is used often result in a crash. This project provides standard validation layers that can be enabled to ease development by helping developers verify their applications correctly use the Vulkan API.
Vulkan supports multiple GPUs and multiple global contexts (VkInstance). The ICD loader is necessary to support multiple GPUs and the VkInstance level Vulkan commands. Additionally, the loader manages inserting Vulkan layer libraries, including validation layers between the application and the ICD.
</Description>
        <PartOf>programming.devel</PartOf>
        <RuntimeDependencies>
            <Dependency release="8">vulkan</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="header">/usr/include/</Path>
            <Path fileType="data">/usr/lib64/pkgconfig/*.pc</Path>
        </Files>
    </Package>
    <History>
        <Update release="8">
            <Date>2018-01-29</Date>
            <Version>1.0.65.2</Version>
            <Comment>Packaging update</Comment>
            <Name>Ikey Doherty</Name>
            <Email>ikey@solus-project.com</Email>
        </Update>
    </History>
</PISI>